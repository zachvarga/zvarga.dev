import { promises } from 'fs';
import { resolve, join } from 'pathe';
import template from 'lodash.template';
import { defineNuxtModule, createResolver, addTemplate, addPlugin, addComponent, isNuxt2, addAutoImport } from '@nuxt/kit';

const name = "@nuxtjs/color-mode";
const version = "3.0.3";

const DEFAULTS = {
  preference: "system",
  fallback: "light",
  hid: "nuxt-color-mode-script",
  globalName: "__NUXT_COLOR_MODE__",
  componentName: "ColorScheme",
  classPrefix: "",
  classSuffix: "-mode",
  storageKey: "nuxt-color-mode"
};
const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: "colorMode",
    compatibility: {
      bridge: true
    }
  },
  defaults: DEFAULTS,
  async setup(options, nuxt) {
    const resolver = createResolver(import.meta.url);
    const scriptPath = await resolver.resolve("./script.min.js");
    const scriptT = await promises.readFile(scriptPath, "utf-8");
    options.script = template(scriptT)({ options });
    nuxt.options.alias["#color-mode-options"] = addTemplate({
      filename: "color-mode-options.mjs",
      getContents: () => Object.entries(options).map(([key, value]) => `export const ${key} = ${JSON.stringify(value, null, 2)}
      `).join("\n")
    }).dst;
    const runtimeDir = await resolver.resolve("./runtime");
    nuxt.options.build.transpile.push(runtimeDir);
    for (const template2 of ["plugin.client", "plugin.server"]) {
      addPlugin(resolve(runtimeDir, template2));
    }
    addComponent({ name: options.componentName, filePath: resolve(runtimeDir, "component." + (isNuxt2() ? "vue2" : "vue3") + ".vue") });
    addAutoImport({ name: "useColorMode", as: "useColorMode", from: resolve(runtimeDir, "composables") });
    if (!nuxt.options.ssr) {
      nuxt.hook("nitro:document", (template2) => {
        template2.contents = template2.contents.replace("</body>", `</body><script>${options.script}<\/script>`);
      });
    }
    if (!isNuxt2()) {
      return;
    }
    nuxt.hook("vue-renderer:spa:prepareContext", ({ head }) => {
      const script = {
        hid: options.hid,
        innerHTML: options.script,
        pbody: true
      };
      head.script.push(script);
      const serializeProp = "__dangerouslyDisableSanitizersByTagID";
      head[serializeProp] = head[serializeProp] || {};
      head[serializeProp][options.hid] = ["innerHTML"];
    });
    const createHash = await import('crypto').then((r) => r.createHash);
    nuxt.hook("vue-renderer:ssr:csp", (cspScriptSrcHashes) => {
      const { csp } = nuxt.options.render;
      const hash = createHash(csp.hashAlgorithm);
      hash.update(options.script);
      cspScriptSrcHashes.push(`'${csp.hashAlgorithm}-${hash.digest("base64")}'`);
    });
    if (nuxt.options.dev) {
      const { dst } = addTemplate({
        src: scriptPath,
        fileName: join("color-mode", "script.min.js"),
        options
      });
      nuxt.hook("webpack:config", (configs) => {
        for (const config of configs) {
          if (config.name !== "server") {
            config.entry.app.unshift(resolve(nuxt.options.buildDir, dst));
          }
        }
      });
    }
  }
});

export { module as default };
