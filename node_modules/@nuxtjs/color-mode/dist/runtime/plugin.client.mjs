import { defineNuxtPlugin, isVue2 } from "#app";
import { reactive, watch } from "vue";
import { useRouter, useState } from "#imports";
import { globalName, storageKey } from "#color-mode-options";
const helper = window[globalName];
export default defineNuxtPlugin((nuxtApp) => {
  const colorMode = useState("color-mode", () => reactive({
    preference: helper.preference,
    value: helper.value,
    unknown: false,
    forced: false
  })).value;
  useRouter().afterEach((to) => {
    const forcedColorMode = isVue2 ? to.matched[0]?.components.default?.options.colorMode : to.meta.colorMode;
    if (forcedColorMode && forcedColorMode !== "system") {
      colorMode.value = forcedColorMode;
      colorMode.forced = true;
    } else {
      if (forcedColorMode === "system") {
        console.warn("You cannot force the colorMode to system at the page level.");
      }
      colorMode.forced = false;
      colorMode.value = colorMode.preference === "system" ? helper.getColorScheme() : colorMode.preference;
    }
  });
  let darkWatcher;
  function watchMedia() {
    if (darkWatcher || !window.matchMedia) {
      return;
    }
    darkWatcher = window.matchMedia("(prefers-color-scheme: dark)");
    darkWatcher.addEventListener("change", () => {
      if (!colorMode.forced && colorMode.preference === "system") {
        colorMode.value = helper.getColorScheme();
      }
    });
  }
  function watchStorageChange() {
    window.addEventListener("storage", (e) => {
      if (e.key === storageKey && e.newValue && colorMode.preference !== e.newValue) {
        colorMode.preference = e.newValue;
      }
    });
  }
  watch(() => colorMode.preference, (preference) => {
    if (colorMode.forced) {
      return;
    }
    if (preference === "system") {
      colorMode.value = helper.getColorScheme();
      watchMedia();
    } else {
      colorMode.value = preference;
    }
    window.localStorage?.setItem(storageKey, preference);
  }, { immediate: true });
  watch(() => colorMode.value, (newValue, oldValue) => {
    helper.removeClass(oldValue);
    helper.addClass(newValue);
  });
  if (colorMode.preference === "system") {
    watchMedia();
  }
  nuxtApp.hook("app:mounted", () => {
    if (window.localStorage) {
      watchStorageChange();
    }
    if (colorMode.unknown) {
      colorMode.preference = helper.preference;
      colorMode.value = helper.value;
      colorMode.unknown = false;
    }
  });
  nuxtApp.provide("colorMode", colorMode);
});
